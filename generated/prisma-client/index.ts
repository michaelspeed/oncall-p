// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  appointment: (where?: AppointmentWhereInput) => Promise<boolean>;
  attending: (where?: AttendingWhereInput) => Promise<boolean>;
  chamber: (where?: ChamberWhereInput) => Promise<boolean>;
  doctor: (where?: DoctorWhereInput) => Promise<boolean>;
  hospital: (where?: HospitalWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  verificationCode: (where?: VerificationCodeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  appointment: (
    where: AppointmentWhereUniqueInput
  ) => AppointmentNullablePromise;
  appointments: (args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Appointment>;
  appointmentsConnection: (args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AppointmentConnectionPromise;
  attending: (where: AttendingWhereUniqueInput) => AttendingNullablePromise;
  attendings: (args?: {
    where?: AttendingWhereInput;
    orderBy?: AttendingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Attending>;
  attendingsConnection: (args?: {
    where?: AttendingWhereInput;
    orderBy?: AttendingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AttendingConnectionPromise;
  chamber: (where: ChamberWhereUniqueInput) => ChamberNullablePromise;
  chambers: (args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Chamber>;
  chambersConnection: (args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChamberConnectionPromise;
  doctor: (where: DoctorWhereUniqueInput) => DoctorNullablePromise;
  doctors: (args?: {
    where?: DoctorWhereInput;
    orderBy?: DoctorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Doctor>;
  doctorsConnection: (args?: {
    where?: DoctorWhereInput;
    orderBy?: DoctorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DoctorConnectionPromise;
  hospital: (where: HospitalWhereUniqueInput) => HospitalNullablePromise;
  hospitals: (args?: {
    where?: HospitalWhereInput;
    orderBy?: HospitalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Hospital>;
  hospitalsConnection: (args?: {
    where?: HospitalWhereInput;
    orderBy?: HospitalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HospitalConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfileNullablePromise;
  profiles: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Profile>;
  profilesConnection: (args?: {
    where?: ProfileWhereInput;
    orderBy?: ProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  verificationCode: (
    where: VerificationCodeWhereUniqueInput
  ) => VerificationCodeNullablePromise;
  verificationCodes: (args?: {
    where?: VerificationCodeWhereInput;
    orderBy?: VerificationCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<VerificationCode>;
  verificationCodesConnection: (args?: {
    where?: VerificationCodeWhereInput;
    orderBy?: VerificationCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VerificationCodeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAppointment: (data: AppointmentCreateInput) => AppointmentPromise;
  updateAppointment: (args: {
    data: AppointmentUpdateInput;
    where: AppointmentWhereUniqueInput;
  }) => AppointmentPromise;
  updateManyAppointments: (args: {
    data: AppointmentUpdateManyMutationInput;
    where?: AppointmentWhereInput;
  }) => BatchPayloadPromise;
  upsertAppointment: (args: {
    where: AppointmentWhereUniqueInput;
    create: AppointmentCreateInput;
    update: AppointmentUpdateInput;
  }) => AppointmentPromise;
  deleteAppointment: (where: AppointmentWhereUniqueInput) => AppointmentPromise;
  deleteManyAppointments: (
    where?: AppointmentWhereInput
  ) => BatchPayloadPromise;
  createAttending: (data: AttendingCreateInput) => AttendingPromise;
  updateAttending: (args: {
    data: AttendingUpdateInput;
    where: AttendingWhereUniqueInput;
  }) => AttendingPromise;
  upsertAttending: (args: {
    where: AttendingWhereUniqueInput;
    create: AttendingCreateInput;
    update: AttendingUpdateInput;
  }) => AttendingPromise;
  deleteAttending: (where: AttendingWhereUniqueInput) => AttendingPromise;
  deleteManyAttendings: (where?: AttendingWhereInput) => BatchPayloadPromise;
  createChamber: (data: ChamberCreateInput) => ChamberPromise;
  updateChamber: (args: {
    data: ChamberUpdateInput;
    where: ChamberWhereUniqueInput;
  }) => ChamberPromise;
  updateManyChambers: (args: {
    data: ChamberUpdateManyMutationInput;
    where?: ChamberWhereInput;
  }) => BatchPayloadPromise;
  upsertChamber: (args: {
    where: ChamberWhereUniqueInput;
    create: ChamberCreateInput;
    update: ChamberUpdateInput;
  }) => ChamberPromise;
  deleteChamber: (where: ChamberWhereUniqueInput) => ChamberPromise;
  deleteManyChambers: (where?: ChamberWhereInput) => BatchPayloadPromise;
  createDoctor: (data: DoctorCreateInput) => DoctorPromise;
  updateDoctor: (args: {
    data: DoctorUpdateInput;
    where: DoctorWhereUniqueInput;
  }) => DoctorPromise;
  updateManyDoctors: (args: {
    data: DoctorUpdateManyMutationInput;
    where?: DoctorWhereInput;
  }) => BatchPayloadPromise;
  upsertDoctor: (args: {
    where: DoctorWhereUniqueInput;
    create: DoctorCreateInput;
    update: DoctorUpdateInput;
  }) => DoctorPromise;
  deleteDoctor: (where: DoctorWhereUniqueInput) => DoctorPromise;
  deleteManyDoctors: (where?: DoctorWhereInput) => BatchPayloadPromise;
  createHospital: (data: HospitalCreateInput) => HospitalPromise;
  updateHospital: (args: {
    data: HospitalUpdateInput;
    where: HospitalWhereUniqueInput;
  }) => HospitalPromise;
  updateManyHospitals: (args: {
    data: HospitalUpdateManyMutationInput;
    where?: HospitalWhereInput;
  }) => BatchPayloadPromise;
  upsertHospital: (args: {
    where: HospitalWhereUniqueInput;
    create: HospitalCreateInput;
    update: HospitalUpdateInput;
  }) => HospitalPromise;
  deleteHospital: (where: HospitalWhereUniqueInput) => HospitalPromise;
  deleteManyHospitals: (where?: HospitalWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (args: {
    data: ProfileUpdateInput;
    where: ProfileWhereUniqueInput;
  }) => ProfilePromise;
  updateManyProfiles: (args: {
    data: ProfileUpdateManyMutationInput;
    where?: ProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertProfile: (args: {
    where: ProfileWhereUniqueInput;
    create: ProfileCreateInput;
    update: ProfileUpdateInput;
  }) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVerificationCode: (
    data: VerificationCodeCreateInput
  ) => VerificationCodePromise;
  updateVerificationCode: (args: {
    data: VerificationCodeUpdateInput;
    where: VerificationCodeWhereUniqueInput;
  }) => VerificationCodePromise;
  updateManyVerificationCodes: (args: {
    data: VerificationCodeUpdateManyMutationInput;
    where?: VerificationCodeWhereInput;
  }) => BatchPayloadPromise;
  upsertVerificationCode: (args: {
    where: VerificationCodeWhereUniqueInput;
    create: VerificationCodeCreateInput;
    update: VerificationCodeUpdateInput;
  }) => VerificationCodePromise;
  deleteVerificationCode: (
    where: VerificationCodeWhereUniqueInput
  ) => VerificationCodePromise;
  deleteManyVerificationCodes: (
    where?: VerificationCodeWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  appointment: (
    where?: AppointmentSubscriptionWhereInput
  ) => AppointmentSubscriptionPayloadSubscription;
  attending: (
    where?: AttendingSubscriptionWhereInput
  ) => AttendingSubscriptionPayloadSubscription;
  chamber: (
    where?: ChamberSubscriptionWhereInput
  ) => ChamberSubscriptionPayloadSubscription;
  doctor: (
    where?: DoctorSubscriptionWhereInput
  ) => DoctorSubscriptionPayloadSubscription;
  hospital: (
    where?: HospitalSubscriptionWhereInput
  ) => HospitalSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  verificationCode: (
    where?: VerificationCodeSubscriptionWhereInput
  ) => VerificationCodeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserRoles =
  | "ADMIN"
  | "USER"
  | "STAFF"
  | "DOCTOR"
  | "ATTENDING"
  | "HOSPITAL";

export type AttendingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "emailVerification_ASC"
  | "emailVerification_DESC"
  | "roles_ASC"
  | "roles_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AppointmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "start_time_ASC"
  | "start_time_DESC"
  | "end_time_ASC"
  | "end_time_DESC";

export type ChamberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "start_time_ASC"
  | "start_time_DESC"
  | "end_time_ASC"
  | "end_time_DESC";

export type DoctorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "specialization_ASC"
  | "specialization_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "emailVerification_ASC"
  | "emailVerification_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "address_ASC"
  | "address_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zip_ASC"
  | "zip_DESC";

export type HospitalOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "emailVerification_ASC"
  | "emailVerification_DESC"
  | "name_ASC"
  | "name_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "lng_ASC"
  | "lng_DESC"
  | "addressID_ASC"
  | "addressID_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "active_ASC"
  | "active_DESC";

export type VerificationCodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "uid_ASC"
  | "uid_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AppointmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AttendingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  doctor?: Maybe<DoctorWhereInput>;
  chamber_every?: Maybe<ChamberWhereInput>;
  chamber_some?: Maybe<ChamberWhereInput>;
  chamber_none?: Maybe<ChamberWhereInput>;
  AND?: Maybe<AttendingWhereInput[] | AttendingWhereInput>;
  OR?: Maybe<AttendingWhereInput[] | AttendingWhereInput>;
  NOT?: Maybe<AttendingWhereInput[] | AttendingWhereInput>;
}

export interface DoctorWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  specialization?: Maybe<String>;
  specialization_not?: Maybe<String>;
  specialization_in?: Maybe<String[] | String>;
  specialization_not_in?: Maybe<String[] | String>;
  specialization_lt?: Maybe<String>;
  specialization_lte?: Maybe<String>;
  specialization_gt?: Maybe<String>;
  specialization_gte?: Maybe<String>;
  specialization_contains?: Maybe<String>;
  specialization_not_contains?: Maybe<String>;
  specialization_starts_with?: Maybe<String>;
  specialization_not_starts_with?: Maybe<String>;
  specialization_ends_with?: Maybe<String>;
  specialization_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  emailVerification?: Maybe<Boolean>;
  emailVerification_not?: Maybe<Boolean>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  zip?: Maybe<String>;
  zip_not?: Maybe<String>;
  zip_in?: Maybe<String[] | String>;
  zip_not_in?: Maybe<String[] | String>;
  zip_lt?: Maybe<String>;
  zip_lte?: Maybe<String>;
  zip_gt?: Maybe<String>;
  zip_gte?: Maybe<String>;
  zip_contains?: Maybe<String>;
  zip_not_contains?: Maybe<String>;
  zip_starts_with?: Maybe<String>;
  zip_not_starts_with?: Maybe<String>;
  zip_ends_with?: Maybe<String>;
  zip_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  attending_every?: Maybe<AttendingWhereInput>;
  attending_some?: Maybe<AttendingWhereInput>;
  attending_none?: Maybe<AttendingWhereInput>;
  chamber_every?: Maybe<ChamberWhereInput>;
  chamber_some?: Maybe<ChamberWhereInput>;
  chamber_none?: Maybe<ChamberWhereInput>;
  verifac?: Maybe<VerificationCodeWhereInput>;
  profile?: Maybe<ProfileWhereInput>;
  AND?: Maybe<DoctorWhereInput[] | DoctorWhereInput>;
  OR?: Maybe<DoctorWhereInput[] | DoctorWhereInput>;
  NOT?: Maybe<DoctorWhereInput[] | DoctorWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  emailVerification_not?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
  roles_not?: Maybe<UserRoles>;
  roles_in?: Maybe<UserRoles[] | UserRoles>;
  roles_not_in?: Maybe<UserRoles[] | UserRoles>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  doctor?: Maybe<DoctorWhereInput>;
  verifac?: Maybe<VerificationCodeWhereInput>;
  hospital?: Maybe<HospitalWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface VerificationCodeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  uid?: Maybe<String>;
  uid_not?: Maybe<String>;
  uid_in?: Maybe<String[] | String>;
  uid_not_in?: Maybe<String[] | String>;
  uid_lt?: Maybe<String>;
  uid_lte?: Maybe<String>;
  uid_gt?: Maybe<String>;
  uid_gte?: Maybe<String>;
  uid_contains?: Maybe<String>;
  uid_not_contains?: Maybe<String>;
  uid_starts_with?: Maybe<String>;
  uid_not_starts_with?: Maybe<String>;
  uid_ends_with?: Maybe<String>;
  uid_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  doctor?: Maybe<DoctorWhereInput>;
  AND?: Maybe<VerificationCodeWhereInput[] | VerificationCodeWhereInput>;
  OR?: Maybe<VerificationCodeWhereInput[] | VerificationCodeWhereInput>;
  NOT?: Maybe<VerificationCodeWhereInput[] | VerificationCodeWhereInput>;
}

export interface HospitalWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  emailVerification?: Maybe<Boolean>;
  emailVerification_not?: Maybe<Boolean>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  profile?: Maybe<ProfileWhereInput>;
  controllers_every?: Maybe<UserWhereInput>;
  controllers_some?: Maybe<UserWhereInput>;
  controllers_none?: Maybe<UserWhereInput>;
  appointments_every?: Maybe<AppointmentWhereInput>;
  appointments_some?: Maybe<AppointmentWhereInput>;
  appointments_none?: Maybe<AppointmentWhereInput>;
  location?: Maybe<LocationWhereInput>;
  AND?: Maybe<HospitalWhereInput[] | HospitalWhereInput>;
  OR?: Maybe<HospitalWhereInput[] | HospitalWhereInput>;
  NOT?: Maybe<HospitalWhereInput[] | HospitalWhereInput>;
}

export interface ProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  hospital?: Maybe<HospitalWhereInput>;
  doctor?: Maybe<DoctorWhereInput>;
  AND?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  OR?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
  NOT?: Maybe<ProfileWhereInput[] | ProfileWhereInput>;
}

export interface AppointmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  start_time?: Maybe<DateTimeInput>;
  start_time_not?: Maybe<DateTimeInput>;
  start_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_time_lt?: Maybe<DateTimeInput>;
  start_time_lte?: Maybe<DateTimeInput>;
  start_time_gt?: Maybe<DateTimeInput>;
  start_time_gte?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  end_time_not?: Maybe<DateTimeInput>;
  end_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_lt?: Maybe<DateTimeInput>;
  end_time_lte?: Maybe<DateTimeInput>;
  end_time_gt?: Maybe<DateTimeInput>;
  end_time_gte?: Maybe<DateTimeInput>;
  chamber?: Maybe<ChamberWhereInput>;
  hospital?: Maybe<HospitalWhereInput>;
  AND?: Maybe<AppointmentWhereInput[] | AppointmentWhereInput>;
  OR?: Maybe<AppointmentWhereInput[] | AppointmentWhereInput>;
  NOT?: Maybe<AppointmentWhereInput[] | AppointmentWhereInput>;
}

export interface ChamberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  start_time_not?: Maybe<DateTimeInput>;
  start_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_time_lt?: Maybe<DateTimeInput>;
  start_time_lte?: Maybe<DateTimeInput>;
  start_time_gt?: Maybe<DateTimeInput>;
  start_time_gte?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  end_time_not?: Maybe<DateTimeInput>;
  end_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_lt?: Maybe<DateTimeInput>;
  end_time_lte?: Maybe<DateTimeInput>;
  end_time_gt?: Maybe<DateTimeInput>;
  end_time_gte?: Maybe<DateTimeInput>;
  attending_every?: Maybe<AttendingWhereInput>;
  attending_some?: Maybe<AttendingWhereInput>;
  attending_none?: Maybe<AttendingWhereInput>;
  appointments_every?: Maybe<AppointmentWhereInput>;
  appointments_some?: Maybe<AppointmentWhereInput>;
  appointments_none?: Maybe<AppointmentWhereInput>;
  doctor_every?: Maybe<DoctorWhereInput>;
  doctor_some?: Maybe<DoctorWhereInput>;
  doctor_none?: Maybe<DoctorWhereInput>;
  location?: Maybe<LocationWhereInput>;
  AND?: Maybe<ChamberWhereInput[] | ChamberWhereInput>;
  OR?: Maybe<ChamberWhereInput[] | ChamberWhereInput>;
  NOT?: Maybe<ChamberWhereInput[] | ChamberWhereInput>;
}

export interface LocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  lat?: Maybe<String>;
  lat_not?: Maybe<String>;
  lat_in?: Maybe<String[] | String>;
  lat_not_in?: Maybe<String[] | String>;
  lat_lt?: Maybe<String>;
  lat_lte?: Maybe<String>;
  lat_gt?: Maybe<String>;
  lat_gte?: Maybe<String>;
  lat_contains?: Maybe<String>;
  lat_not_contains?: Maybe<String>;
  lat_starts_with?: Maybe<String>;
  lat_not_starts_with?: Maybe<String>;
  lat_ends_with?: Maybe<String>;
  lat_not_ends_with?: Maybe<String>;
  lng?: Maybe<String>;
  lng_not?: Maybe<String>;
  lng_in?: Maybe<String[] | String>;
  lng_not_in?: Maybe<String[] | String>;
  lng_lt?: Maybe<String>;
  lng_lte?: Maybe<String>;
  lng_gt?: Maybe<String>;
  lng_gte?: Maybe<String>;
  lng_contains?: Maybe<String>;
  lng_not_contains?: Maybe<String>;
  lng_starts_with?: Maybe<String>;
  lng_not_starts_with?: Maybe<String>;
  lng_ends_with?: Maybe<String>;
  lng_not_ends_with?: Maybe<String>;
  addressID?: Maybe<String>;
  addressID_not?: Maybe<String>;
  addressID_in?: Maybe<String[] | String>;
  addressID_not_in?: Maybe<String[] | String>;
  addressID_lt?: Maybe<String>;
  addressID_lte?: Maybe<String>;
  addressID_gt?: Maybe<String>;
  addressID_gte?: Maybe<String>;
  addressID_contains?: Maybe<String>;
  addressID_not_contains?: Maybe<String>;
  addressID_starts_with?: Maybe<String>;
  addressID_not_starts_with?: Maybe<String>;
  addressID_ends_with?: Maybe<String>;
  addressID_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  hospital?: Maybe<HospitalWhereInput>;
  chamber?: Maybe<ChamberWhereInput>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export type AttendingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ChamberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type DoctorWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type HospitalWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type VerificationCodeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AppointmentCreateInput {
  id?: Maybe<ID_Input>;
  start_time: DateTimeInput;
  end_time: DateTimeInput;
  chamber?: Maybe<ChamberCreateOneWithoutAppointmentsInput>;
  hospital?: Maybe<HospitalCreateOneWithoutAppointmentsInput>;
}

export interface ChamberCreateOneWithoutAppointmentsInput {
  create?: Maybe<ChamberCreateWithoutAppointmentsInput>;
  connect?: Maybe<ChamberWhereUniqueInput>;
}

export interface ChamberCreateWithoutAppointmentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  start_time: DateTimeInput;
  end_time: DateTimeInput;
  attending?: Maybe<AttendingCreateManyWithoutChamberInput>;
  doctor?: Maybe<DoctorCreateManyWithoutChamberInput>;
  location?: Maybe<LocationCreateOneWithoutChamberInput>;
}

export interface AttendingCreateManyWithoutChamberInput {
  create?: Maybe<
    AttendingCreateWithoutChamberInput[] | AttendingCreateWithoutChamberInput
  >;
  connect?: Maybe<AttendingWhereUniqueInput[] | AttendingWhereUniqueInput>;
}

export interface AttendingCreateWithoutChamberInput {
  id?: Maybe<ID_Input>;
  doctor?: Maybe<DoctorCreateOneWithoutAttendingInput>;
}

export interface DoctorCreateOneWithoutAttendingInput {
  create?: Maybe<DoctorCreateWithoutAttendingInput>;
  connect?: Maybe<DoctorWhereUniqueInput>;
}

export interface DoctorCreateWithoutAttendingInput {
  id?: Maybe<ID_Input>;
  name: String;
  specialization: String;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  user: UserCreateOneWithoutDoctorInput;
  chamber?: Maybe<ChamberCreateManyWithoutDoctorInput>;
  verifac?: Maybe<VerificationCodeCreateOneWithoutDoctorInput>;
  profile?: Maybe<ProfileCreateOneWithoutDoctorInput>;
}

export interface UserCreateOneWithoutDoctorInput {
  create?: Maybe<UserCreateWithoutDoctorInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutDoctorInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  emailVerification?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
  verifac?: Maybe<VerificationCodeCreateOneWithoutUserInput>;
  hospital?: Maybe<HospitalCreateOneWithoutControllersInput>;
}

export interface VerificationCodeCreateOneWithoutUserInput {
  create?: Maybe<VerificationCodeCreateWithoutUserInput>;
  connect?: Maybe<VerificationCodeWhereUniqueInput>;
}

export interface VerificationCodeCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  uid: String;
  doctor?: Maybe<DoctorCreateOneWithoutVerifacInput>;
}

export interface DoctorCreateOneWithoutVerifacInput {
  create?: Maybe<DoctorCreateWithoutVerifacInput>;
  connect?: Maybe<DoctorWhereUniqueInput>;
}

export interface DoctorCreateWithoutVerifacInput {
  id?: Maybe<ID_Input>;
  name: String;
  specialization: String;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  user: UserCreateOneWithoutDoctorInput;
  attending?: Maybe<AttendingCreateManyWithoutDoctorInput>;
  chamber?: Maybe<ChamberCreateManyWithoutDoctorInput>;
  profile?: Maybe<ProfileCreateOneWithoutDoctorInput>;
}

export interface AttendingCreateManyWithoutDoctorInput {
  create?: Maybe<
    AttendingCreateWithoutDoctorInput[] | AttendingCreateWithoutDoctorInput
  >;
  connect?: Maybe<AttendingWhereUniqueInput[] | AttendingWhereUniqueInput>;
}

export interface AttendingCreateWithoutDoctorInput {
  id?: Maybe<ID_Input>;
  chamber?: Maybe<ChamberCreateManyWithoutAttendingInput>;
}

export interface ChamberCreateManyWithoutAttendingInput {
  create?: Maybe<
    ChamberCreateWithoutAttendingInput[] | ChamberCreateWithoutAttendingInput
  >;
  connect?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
}

export interface ChamberCreateWithoutAttendingInput {
  id?: Maybe<ID_Input>;
  name: String;
  start_time: DateTimeInput;
  end_time: DateTimeInput;
  appointments?: Maybe<AppointmentCreateManyWithoutChamberInput>;
  doctor?: Maybe<DoctorCreateManyWithoutChamberInput>;
  location?: Maybe<LocationCreateOneWithoutChamberInput>;
}

export interface AppointmentCreateManyWithoutChamberInput {
  create?: Maybe<
    | AppointmentCreateWithoutChamberInput[]
    | AppointmentCreateWithoutChamberInput
  >;
  connect?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
}

export interface AppointmentCreateWithoutChamberInput {
  id?: Maybe<ID_Input>;
  start_time: DateTimeInput;
  end_time: DateTimeInput;
  hospital?: Maybe<HospitalCreateOneWithoutAppointmentsInput>;
}

export interface HospitalCreateOneWithoutAppointmentsInput {
  create?: Maybe<HospitalCreateWithoutAppointmentsInput>;
  connect?: Maybe<HospitalWhereUniqueInput>;
}

export interface HospitalCreateWithoutAppointmentsInput {
  id?: Maybe<ID_Input>;
  emailVerification?: Maybe<Boolean>;
  name: String;
  profile: ProfileCreateOneWithoutHospitalInput;
  controllers?: Maybe<UserCreateManyWithoutHospitalInput>;
  location?: Maybe<LocationCreateOneWithoutHospitalInput>;
}

export interface ProfileCreateOneWithoutHospitalInput {
  create?: Maybe<ProfileCreateWithoutHospitalInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileCreateWithoutHospitalInput {
  id?: Maybe<ID_Input>;
  phone: String;
  active?: Maybe<Boolean>;
  doctor?: Maybe<DoctorCreateOneWithoutProfileInput>;
}

export interface DoctorCreateOneWithoutProfileInput {
  create?: Maybe<DoctorCreateWithoutProfileInput>;
  connect?: Maybe<DoctorWhereUniqueInput>;
}

export interface DoctorCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  name: String;
  specialization: String;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  user: UserCreateOneWithoutDoctorInput;
  attending?: Maybe<AttendingCreateManyWithoutDoctorInput>;
  chamber?: Maybe<ChamberCreateManyWithoutDoctorInput>;
  verifac?: Maybe<VerificationCodeCreateOneWithoutDoctorInput>;
}

export interface ChamberCreateManyWithoutDoctorInput {
  create?: Maybe<
    ChamberCreateWithoutDoctorInput[] | ChamberCreateWithoutDoctorInput
  >;
  connect?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
}

export interface ChamberCreateWithoutDoctorInput {
  id?: Maybe<ID_Input>;
  name: String;
  start_time: DateTimeInput;
  end_time: DateTimeInput;
  attending?: Maybe<AttendingCreateManyWithoutChamberInput>;
  appointments?: Maybe<AppointmentCreateManyWithoutChamberInput>;
  location?: Maybe<LocationCreateOneWithoutChamberInput>;
}

export interface LocationCreateOneWithoutChamberInput {
  create?: Maybe<LocationCreateWithoutChamberInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface LocationCreateWithoutChamberInput {
  id?: Maybe<ID_Input>;
  address?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  addressID?: Maybe<String>;
  hospital?: Maybe<HospitalCreateOneWithoutLocationInput>;
}

export interface HospitalCreateOneWithoutLocationInput {
  create?: Maybe<HospitalCreateWithoutLocationInput>;
  connect?: Maybe<HospitalWhereUniqueInput>;
}

export interface HospitalCreateWithoutLocationInput {
  id?: Maybe<ID_Input>;
  emailVerification?: Maybe<Boolean>;
  name: String;
  profile: ProfileCreateOneWithoutHospitalInput;
  controllers?: Maybe<UserCreateManyWithoutHospitalInput>;
  appointments?: Maybe<AppointmentCreateManyWithoutHospitalInput>;
}

export interface UserCreateManyWithoutHospitalInput {
  create?: Maybe<
    UserCreateWithoutHospitalInput[] | UserCreateWithoutHospitalInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutHospitalInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  emailVerification?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
  doctor: DoctorCreateOneWithoutUserInput;
  verifac?: Maybe<VerificationCodeCreateOneWithoutUserInput>;
}

export interface DoctorCreateOneWithoutUserInput {
  create?: Maybe<DoctorCreateWithoutUserInput>;
  connect?: Maybe<DoctorWhereUniqueInput>;
}

export interface DoctorCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  specialization: String;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  attending?: Maybe<AttendingCreateManyWithoutDoctorInput>;
  chamber?: Maybe<ChamberCreateManyWithoutDoctorInput>;
  verifac?: Maybe<VerificationCodeCreateOneWithoutDoctorInput>;
  profile?: Maybe<ProfileCreateOneWithoutDoctorInput>;
}

export interface VerificationCodeCreateOneWithoutDoctorInput {
  create?: Maybe<VerificationCodeCreateWithoutDoctorInput>;
  connect?: Maybe<VerificationCodeWhereUniqueInput>;
}

export interface VerificationCodeCreateWithoutDoctorInput {
  id?: Maybe<ID_Input>;
  uid: String;
  user?: Maybe<UserCreateOneWithoutVerifacInput>;
}

export interface UserCreateOneWithoutVerifacInput {
  create?: Maybe<UserCreateWithoutVerifacInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutVerifacInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  emailVerification?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
  doctor: DoctorCreateOneWithoutUserInput;
  hospital?: Maybe<HospitalCreateOneWithoutControllersInput>;
}

export interface HospitalCreateOneWithoutControllersInput {
  create?: Maybe<HospitalCreateWithoutControllersInput>;
  connect?: Maybe<HospitalWhereUniqueInput>;
}

export interface HospitalCreateWithoutControllersInput {
  id?: Maybe<ID_Input>;
  emailVerification?: Maybe<Boolean>;
  name: String;
  profile: ProfileCreateOneWithoutHospitalInput;
  appointments?: Maybe<AppointmentCreateManyWithoutHospitalInput>;
  location?: Maybe<LocationCreateOneWithoutHospitalInput>;
}

export interface AppointmentCreateManyWithoutHospitalInput {
  create?: Maybe<
    | AppointmentCreateWithoutHospitalInput[]
    | AppointmentCreateWithoutHospitalInput
  >;
  connect?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
}

export interface AppointmentCreateWithoutHospitalInput {
  id?: Maybe<ID_Input>;
  start_time: DateTimeInput;
  end_time: DateTimeInput;
  chamber?: Maybe<ChamberCreateOneWithoutAppointmentsInput>;
}

export interface LocationCreateOneWithoutHospitalInput {
  create?: Maybe<LocationCreateWithoutHospitalInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface LocationCreateWithoutHospitalInput {
  id?: Maybe<ID_Input>;
  address?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  addressID?: Maybe<String>;
  chamber?: Maybe<ChamberCreateOneWithoutLocationInput>;
}

export interface ChamberCreateOneWithoutLocationInput {
  create?: Maybe<ChamberCreateWithoutLocationInput>;
  connect?: Maybe<ChamberWhereUniqueInput>;
}

export interface ChamberCreateWithoutLocationInput {
  id?: Maybe<ID_Input>;
  name: String;
  start_time: DateTimeInput;
  end_time: DateTimeInput;
  attending?: Maybe<AttendingCreateManyWithoutChamberInput>;
  appointments?: Maybe<AppointmentCreateManyWithoutChamberInput>;
  doctor?: Maybe<DoctorCreateManyWithoutChamberInput>;
}

export interface DoctorCreateManyWithoutChamberInput {
  create?: Maybe<
    DoctorCreateWithoutChamberInput[] | DoctorCreateWithoutChamberInput
  >;
  connect?: Maybe<DoctorWhereUniqueInput[] | DoctorWhereUniqueInput>;
}

export interface DoctorCreateWithoutChamberInput {
  id?: Maybe<ID_Input>;
  name: String;
  specialization: String;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  user: UserCreateOneWithoutDoctorInput;
  attending?: Maybe<AttendingCreateManyWithoutDoctorInput>;
  verifac?: Maybe<VerificationCodeCreateOneWithoutDoctorInput>;
  profile?: Maybe<ProfileCreateOneWithoutDoctorInput>;
}

export interface ProfileCreateOneWithoutDoctorInput {
  create?: Maybe<ProfileCreateWithoutDoctorInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileCreateWithoutDoctorInput {
  id?: Maybe<ID_Input>;
  phone: String;
  active?: Maybe<Boolean>;
  hospital?: Maybe<HospitalCreateOneWithoutProfileInput>;
}

export interface HospitalCreateOneWithoutProfileInput {
  create?: Maybe<HospitalCreateWithoutProfileInput>;
  connect?: Maybe<HospitalWhereUniqueInput>;
}

export interface HospitalCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  emailVerification?: Maybe<Boolean>;
  name: String;
  controllers?: Maybe<UserCreateManyWithoutHospitalInput>;
  appointments?: Maybe<AppointmentCreateManyWithoutHospitalInput>;
  location?: Maybe<LocationCreateOneWithoutHospitalInput>;
}

export interface AppointmentUpdateInput {
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  chamber?: Maybe<ChamberUpdateOneWithoutAppointmentsInput>;
  hospital?: Maybe<HospitalUpdateOneWithoutAppointmentsInput>;
}

export interface ChamberUpdateOneWithoutAppointmentsInput {
  create?: Maybe<ChamberCreateWithoutAppointmentsInput>;
  update?: Maybe<ChamberUpdateWithoutAppointmentsDataInput>;
  upsert?: Maybe<ChamberUpsertWithoutAppointmentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChamberWhereUniqueInput>;
}

export interface ChamberUpdateWithoutAppointmentsDataInput {
  name?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  attending?: Maybe<AttendingUpdateManyWithoutChamberInput>;
  doctor?: Maybe<DoctorUpdateManyWithoutChamberInput>;
  location?: Maybe<LocationUpdateOneWithoutChamberInput>;
}

export interface AttendingUpdateManyWithoutChamberInput {
  create?: Maybe<
    AttendingCreateWithoutChamberInput[] | AttendingCreateWithoutChamberInput
  >;
  delete?: Maybe<AttendingWhereUniqueInput[] | AttendingWhereUniqueInput>;
  connect?: Maybe<AttendingWhereUniqueInput[] | AttendingWhereUniqueInput>;
  set?: Maybe<AttendingWhereUniqueInput[] | AttendingWhereUniqueInput>;
  disconnect?: Maybe<AttendingWhereUniqueInput[] | AttendingWhereUniqueInput>;
  update?: Maybe<
    | AttendingUpdateWithWhereUniqueWithoutChamberInput[]
    | AttendingUpdateWithWhereUniqueWithoutChamberInput
  >;
  upsert?: Maybe<
    | AttendingUpsertWithWhereUniqueWithoutChamberInput[]
    | AttendingUpsertWithWhereUniqueWithoutChamberInput
  >;
  deleteMany?: Maybe<AttendingScalarWhereInput[] | AttendingScalarWhereInput>;
}

export interface AttendingUpdateWithWhereUniqueWithoutChamberInput {
  where: AttendingWhereUniqueInput;
  data: AttendingUpdateWithoutChamberDataInput;
}

export interface AttendingUpdateWithoutChamberDataInput {
  doctor?: Maybe<DoctorUpdateOneWithoutAttendingInput>;
}

export interface DoctorUpdateOneWithoutAttendingInput {
  create?: Maybe<DoctorCreateWithoutAttendingInput>;
  update?: Maybe<DoctorUpdateWithoutAttendingDataInput>;
  upsert?: Maybe<DoctorUpsertWithoutAttendingInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DoctorWhereUniqueInput>;
}

export interface DoctorUpdateWithoutAttendingDataInput {
  name?: Maybe<String>;
  specialization?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutDoctorInput>;
  chamber?: Maybe<ChamberUpdateManyWithoutDoctorInput>;
  verifac?: Maybe<VerificationCodeUpdateOneWithoutDoctorInput>;
  profile?: Maybe<ProfileUpdateOneWithoutDoctorInput>;
}

export interface UserUpdateOneRequiredWithoutDoctorInput {
  create?: Maybe<UserCreateWithoutDoctorInput>;
  update?: Maybe<UserUpdateWithoutDoctorDataInput>;
  upsert?: Maybe<UserUpsertWithoutDoctorInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutDoctorDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
  verifac?: Maybe<VerificationCodeUpdateOneWithoutUserInput>;
  hospital?: Maybe<HospitalUpdateOneWithoutControllersInput>;
}

export interface VerificationCodeUpdateOneWithoutUserInput {
  create?: Maybe<VerificationCodeCreateWithoutUserInput>;
  update?: Maybe<VerificationCodeUpdateWithoutUserDataInput>;
  upsert?: Maybe<VerificationCodeUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<VerificationCodeWhereUniqueInput>;
}

export interface VerificationCodeUpdateWithoutUserDataInput {
  uid?: Maybe<String>;
  doctor?: Maybe<DoctorUpdateOneWithoutVerifacInput>;
}

export interface DoctorUpdateOneWithoutVerifacInput {
  create?: Maybe<DoctorCreateWithoutVerifacInput>;
  update?: Maybe<DoctorUpdateWithoutVerifacDataInput>;
  upsert?: Maybe<DoctorUpsertWithoutVerifacInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DoctorWhereUniqueInput>;
}

export interface DoctorUpdateWithoutVerifacDataInput {
  name?: Maybe<String>;
  specialization?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutDoctorInput>;
  attending?: Maybe<AttendingUpdateManyWithoutDoctorInput>;
  chamber?: Maybe<ChamberUpdateManyWithoutDoctorInput>;
  profile?: Maybe<ProfileUpdateOneWithoutDoctorInput>;
}

export interface AttendingUpdateManyWithoutDoctorInput {
  create?: Maybe<
    AttendingCreateWithoutDoctorInput[] | AttendingCreateWithoutDoctorInput
  >;
  delete?: Maybe<AttendingWhereUniqueInput[] | AttendingWhereUniqueInput>;
  connect?: Maybe<AttendingWhereUniqueInput[] | AttendingWhereUniqueInput>;
  set?: Maybe<AttendingWhereUniqueInput[] | AttendingWhereUniqueInput>;
  disconnect?: Maybe<AttendingWhereUniqueInput[] | AttendingWhereUniqueInput>;
  update?: Maybe<
    | AttendingUpdateWithWhereUniqueWithoutDoctorInput[]
    | AttendingUpdateWithWhereUniqueWithoutDoctorInput
  >;
  upsert?: Maybe<
    | AttendingUpsertWithWhereUniqueWithoutDoctorInput[]
    | AttendingUpsertWithWhereUniqueWithoutDoctorInput
  >;
  deleteMany?: Maybe<AttendingScalarWhereInput[] | AttendingScalarWhereInput>;
}

export interface AttendingUpdateWithWhereUniqueWithoutDoctorInput {
  where: AttendingWhereUniqueInput;
  data: AttendingUpdateWithoutDoctorDataInput;
}

export interface AttendingUpdateWithoutDoctorDataInput {
  chamber?: Maybe<ChamberUpdateManyWithoutAttendingInput>;
}

export interface ChamberUpdateManyWithoutAttendingInput {
  create?: Maybe<
    ChamberCreateWithoutAttendingInput[] | ChamberCreateWithoutAttendingInput
  >;
  delete?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  connect?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  set?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  disconnect?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  update?: Maybe<
    | ChamberUpdateWithWhereUniqueWithoutAttendingInput[]
    | ChamberUpdateWithWhereUniqueWithoutAttendingInput
  >;
  upsert?: Maybe<
    | ChamberUpsertWithWhereUniqueWithoutAttendingInput[]
    | ChamberUpsertWithWhereUniqueWithoutAttendingInput
  >;
  deleteMany?: Maybe<ChamberScalarWhereInput[] | ChamberScalarWhereInput>;
  updateMany?: Maybe<
    | ChamberUpdateManyWithWhereNestedInput[]
    | ChamberUpdateManyWithWhereNestedInput
  >;
}

export interface ChamberUpdateWithWhereUniqueWithoutAttendingInput {
  where: ChamberWhereUniqueInput;
  data: ChamberUpdateWithoutAttendingDataInput;
}

export interface ChamberUpdateWithoutAttendingDataInput {
  name?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutChamberInput>;
  doctor?: Maybe<DoctorUpdateManyWithoutChamberInput>;
  location?: Maybe<LocationUpdateOneWithoutChamberInput>;
}

export interface AppointmentUpdateManyWithoutChamberInput {
  create?: Maybe<
    | AppointmentCreateWithoutChamberInput[]
    | AppointmentCreateWithoutChamberInput
  >;
  delete?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  connect?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  set?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  disconnect?: Maybe<
    AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput
  >;
  update?: Maybe<
    | AppointmentUpdateWithWhereUniqueWithoutChamberInput[]
    | AppointmentUpdateWithWhereUniqueWithoutChamberInput
  >;
  upsert?: Maybe<
    | AppointmentUpsertWithWhereUniqueWithoutChamberInput[]
    | AppointmentUpsertWithWhereUniqueWithoutChamberInput
  >;
  deleteMany?: Maybe<
    AppointmentScalarWhereInput[] | AppointmentScalarWhereInput
  >;
  updateMany?: Maybe<
    | AppointmentUpdateManyWithWhereNestedInput[]
    | AppointmentUpdateManyWithWhereNestedInput
  >;
}

export interface AppointmentUpdateWithWhereUniqueWithoutChamberInput {
  where: AppointmentWhereUniqueInput;
  data: AppointmentUpdateWithoutChamberDataInput;
}

export interface AppointmentUpdateWithoutChamberDataInput {
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  hospital?: Maybe<HospitalUpdateOneWithoutAppointmentsInput>;
}

export interface HospitalUpdateOneWithoutAppointmentsInput {
  create?: Maybe<HospitalCreateWithoutAppointmentsInput>;
  update?: Maybe<HospitalUpdateWithoutAppointmentsDataInput>;
  upsert?: Maybe<HospitalUpsertWithoutAppointmentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<HospitalWhereUniqueInput>;
}

export interface HospitalUpdateWithoutAppointmentsDataInput {
  emailVerification?: Maybe<Boolean>;
  name?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneRequiredWithoutHospitalInput>;
  controllers?: Maybe<UserUpdateManyWithoutHospitalInput>;
  location?: Maybe<LocationUpdateOneWithoutHospitalInput>;
}

export interface ProfileUpdateOneRequiredWithoutHospitalInput {
  create?: Maybe<ProfileCreateWithoutHospitalInput>;
  update?: Maybe<ProfileUpdateWithoutHospitalDataInput>;
  upsert?: Maybe<ProfileUpsertWithoutHospitalInput>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileUpdateWithoutHospitalDataInput {
  phone?: Maybe<String>;
  active?: Maybe<Boolean>;
  doctor?: Maybe<DoctorUpdateOneWithoutProfileInput>;
}

export interface DoctorUpdateOneWithoutProfileInput {
  create?: Maybe<DoctorCreateWithoutProfileInput>;
  update?: Maybe<DoctorUpdateWithoutProfileDataInput>;
  upsert?: Maybe<DoctorUpsertWithoutProfileInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DoctorWhereUniqueInput>;
}

export interface DoctorUpdateWithoutProfileDataInput {
  name?: Maybe<String>;
  specialization?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutDoctorInput>;
  attending?: Maybe<AttendingUpdateManyWithoutDoctorInput>;
  chamber?: Maybe<ChamberUpdateManyWithoutDoctorInput>;
  verifac?: Maybe<VerificationCodeUpdateOneWithoutDoctorInput>;
}

export interface ChamberUpdateManyWithoutDoctorInput {
  create?: Maybe<
    ChamberCreateWithoutDoctorInput[] | ChamberCreateWithoutDoctorInput
  >;
  delete?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  connect?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  set?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  disconnect?: Maybe<ChamberWhereUniqueInput[] | ChamberWhereUniqueInput>;
  update?: Maybe<
    | ChamberUpdateWithWhereUniqueWithoutDoctorInput[]
    | ChamberUpdateWithWhereUniqueWithoutDoctorInput
  >;
  upsert?: Maybe<
    | ChamberUpsertWithWhereUniqueWithoutDoctorInput[]
    | ChamberUpsertWithWhereUniqueWithoutDoctorInput
  >;
  deleteMany?: Maybe<ChamberScalarWhereInput[] | ChamberScalarWhereInput>;
  updateMany?: Maybe<
    | ChamberUpdateManyWithWhereNestedInput[]
    | ChamberUpdateManyWithWhereNestedInput
  >;
}

export interface ChamberUpdateWithWhereUniqueWithoutDoctorInput {
  where: ChamberWhereUniqueInput;
  data: ChamberUpdateWithoutDoctorDataInput;
}

export interface ChamberUpdateWithoutDoctorDataInput {
  name?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  attending?: Maybe<AttendingUpdateManyWithoutChamberInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutChamberInput>;
  location?: Maybe<LocationUpdateOneWithoutChamberInput>;
}

export interface LocationUpdateOneWithoutChamberInput {
  create?: Maybe<LocationCreateWithoutChamberInput>;
  update?: Maybe<LocationUpdateWithoutChamberDataInput>;
  upsert?: Maybe<LocationUpsertWithoutChamberInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface LocationUpdateWithoutChamberDataInput {
  address?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  addressID?: Maybe<String>;
  hospital?: Maybe<HospitalUpdateOneWithoutLocationInput>;
}

export interface HospitalUpdateOneWithoutLocationInput {
  create?: Maybe<HospitalCreateWithoutLocationInput>;
  update?: Maybe<HospitalUpdateWithoutLocationDataInput>;
  upsert?: Maybe<HospitalUpsertWithoutLocationInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<HospitalWhereUniqueInput>;
}

export interface HospitalUpdateWithoutLocationDataInput {
  emailVerification?: Maybe<Boolean>;
  name?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneRequiredWithoutHospitalInput>;
  controllers?: Maybe<UserUpdateManyWithoutHospitalInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutHospitalInput>;
}

export interface UserUpdateManyWithoutHospitalInput {
  create?: Maybe<
    UserCreateWithoutHospitalInput[] | UserCreateWithoutHospitalInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutHospitalInput[]
    | UserUpdateWithWhereUniqueWithoutHospitalInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutHospitalInput[]
    | UserUpsertWithWhereUniqueWithoutHospitalInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutHospitalInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutHospitalDataInput;
}

export interface UserUpdateWithoutHospitalDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
  doctor?: Maybe<DoctorUpdateOneRequiredWithoutUserInput>;
  verifac?: Maybe<VerificationCodeUpdateOneWithoutUserInput>;
}

export interface DoctorUpdateOneRequiredWithoutUserInput {
  create?: Maybe<DoctorCreateWithoutUserInput>;
  update?: Maybe<DoctorUpdateWithoutUserDataInput>;
  upsert?: Maybe<DoctorUpsertWithoutUserInput>;
  connect?: Maybe<DoctorWhereUniqueInput>;
}

export interface DoctorUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  specialization?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  attending?: Maybe<AttendingUpdateManyWithoutDoctorInput>;
  chamber?: Maybe<ChamberUpdateManyWithoutDoctorInput>;
  verifac?: Maybe<VerificationCodeUpdateOneWithoutDoctorInput>;
  profile?: Maybe<ProfileUpdateOneWithoutDoctorInput>;
}

export interface VerificationCodeUpdateOneWithoutDoctorInput {
  create?: Maybe<VerificationCodeCreateWithoutDoctorInput>;
  update?: Maybe<VerificationCodeUpdateWithoutDoctorDataInput>;
  upsert?: Maybe<VerificationCodeUpsertWithoutDoctorInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<VerificationCodeWhereUniqueInput>;
}

export interface VerificationCodeUpdateWithoutDoctorDataInput {
  uid?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutVerifacInput>;
}

export interface UserUpdateOneWithoutVerifacInput {
  create?: Maybe<UserCreateWithoutVerifacInput>;
  update?: Maybe<UserUpdateWithoutVerifacDataInput>;
  upsert?: Maybe<UserUpsertWithoutVerifacInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutVerifacDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
  doctor?: Maybe<DoctorUpdateOneRequiredWithoutUserInput>;
  hospital?: Maybe<HospitalUpdateOneWithoutControllersInput>;
}

export interface HospitalUpdateOneWithoutControllersInput {
  create?: Maybe<HospitalCreateWithoutControllersInput>;
  update?: Maybe<HospitalUpdateWithoutControllersDataInput>;
  upsert?: Maybe<HospitalUpsertWithoutControllersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<HospitalWhereUniqueInput>;
}

export interface HospitalUpdateWithoutControllersDataInput {
  emailVerification?: Maybe<Boolean>;
  name?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneRequiredWithoutHospitalInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutHospitalInput>;
  location?: Maybe<LocationUpdateOneWithoutHospitalInput>;
}

export interface AppointmentUpdateManyWithoutHospitalInput {
  create?: Maybe<
    | AppointmentCreateWithoutHospitalInput[]
    | AppointmentCreateWithoutHospitalInput
  >;
  delete?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  connect?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  set?: Maybe<AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput>;
  disconnect?: Maybe<
    AppointmentWhereUniqueInput[] | AppointmentWhereUniqueInput
  >;
  update?: Maybe<
    | AppointmentUpdateWithWhereUniqueWithoutHospitalInput[]
    | AppointmentUpdateWithWhereUniqueWithoutHospitalInput
  >;
  upsert?: Maybe<
    | AppointmentUpsertWithWhereUniqueWithoutHospitalInput[]
    | AppointmentUpsertWithWhereUniqueWithoutHospitalInput
  >;
  deleteMany?: Maybe<
    AppointmentScalarWhereInput[] | AppointmentScalarWhereInput
  >;
  updateMany?: Maybe<
    | AppointmentUpdateManyWithWhereNestedInput[]
    | AppointmentUpdateManyWithWhereNestedInput
  >;
}

export interface AppointmentUpdateWithWhereUniqueWithoutHospitalInput {
  where: AppointmentWhereUniqueInput;
  data: AppointmentUpdateWithoutHospitalDataInput;
}

export interface AppointmentUpdateWithoutHospitalDataInput {
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  chamber?: Maybe<ChamberUpdateOneWithoutAppointmentsInput>;
}

export interface AppointmentUpsertWithWhereUniqueWithoutHospitalInput {
  where: AppointmentWhereUniqueInput;
  update: AppointmentUpdateWithoutHospitalDataInput;
  create: AppointmentCreateWithoutHospitalInput;
}

export interface AppointmentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  start_time?: Maybe<DateTimeInput>;
  start_time_not?: Maybe<DateTimeInput>;
  start_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_time_lt?: Maybe<DateTimeInput>;
  start_time_lte?: Maybe<DateTimeInput>;
  start_time_gt?: Maybe<DateTimeInput>;
  start_time_gte?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  end_time_not?: Maybe<DateTimeInput>;
  end_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_lt?: Maybe<DateTimeInput>;
  end_time_lte?: Maybe<DateTimeInput>;
  end_time_gt?: Maybe<DateTimeInput>;
  end_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AppointmentScalarWhereInput[] | AppointmentScalarWhereInput>;
  OR?: Maybe<AppointmentScalarWhereInput[] | AppointmentScalarWhereInput>;
  NOT?: Maybe<AppointmentScalarWhereInput[] | AppointmentScalarWhereInput>;
}

export interface AppointmentUpdateManyWithWhereNestedInput {
  where: AppointmentScalarWhereInput;
  data: AppointmentUpdateManyDataInput;
}

export interface AppointmentUpdateManyDataInput {
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
}

export interface LocationUpdateOneWithoutHospitalInput {
  create?: Maybe<LocationCreateWithoutHospitalInput>;
  update?: Maybe<LocationUpdateWithoutHospitalDataInput>;
  upsert?: Maybe<LocationUpsertWithoutHospitalInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface LocationUpdateWithoutHospitalDataInput {
  address?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  addressID?: Maybe<String>;
  chamber?: Maybe<ChamberUpdateOneWithoutLocationInput>;
}

export interface ChamberUpdateOneWithoutLocationInput {
  create?: Maybe<ChamberCreateWithoutLocationInput>;
  update?: Maybe<ChamberUpdateWithoutLocationDataInput>;
  upsert?: Maybe<ChamberUpsertWithoutLocationInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ChamberWhereUniqueInput>;
}

export interface ChamberUpdateWithoutLocationDataInput {
  name?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  attending?: Maybe<AttendingUpdateManyWithoutChamberInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutChamberInput>;
  doctor?: Maybe<DoctorUpdateManyWithoutChamberInput>;
}

export interface DoctorUpdateManyWithoutChamberInput {
  create?: Maybe<
    DoctorCreateWithoutChamberInput[] | DoctorCreateWithoutChamberInput
  >;
  delete?: Maybe<DoctorWhereUniqueInput[] | DoctorWhereUniqueInput>;
  connect?: Maybe<DoctorWhereUniqueInput[] | DoctorWhereUniqueInput>;
  set?: Maybe<DoctorWhereUniqueInput[] | DoctorWhereUniqueInput>;
  disconnect?: Maybe<DoctorWhereUniqueInput[] | DoctorWhereUniqueInput>;
  update?: Maybe<
    | DoctorUpdateWithWhereUniqueWithoutChamberInput[]
    | DoctorUpdateWithWhereUniqueWithoutChamberInput
  >;
  upsert?: Maybe<
    | DoctorUpsertWithWhereUniqueWithoutChamberInput[]
    | DoctorUpsertWithWhereUniqueWithoutChamberInput
  >;
  deleteMany?: Maybe<DoctorScalarWhereInput[] | DoctorScalarWhereInput>;
  updateMany?: Maybe<
    | DoctorUpdateManyWithWhereNestedInput[]
    | DoctorUpdateManyWithWhereNestedInput
  >;
}

export interface DoctorUpdateWithWhereUniqueWithoutChamberInput {
  where: DoctorWhereUniqueInput;
  data: DoctorUpdateWithoutChamberDataInput;
}

export interface DoctorUpdateWithoutChamberDataInput {
  name?: Maybe<String>;
  specialization?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutDoctorInput>;
  attending?: Maybe<AttendingUpdateManyWithoutDoctorInput>;
  verifac?: Maybe<VerificationCodeUpdateOneWithoutDoctorInput>;
  profile?: Maybe<ProfileUpdateOneWithoutDoctorInput>;
}

export interface ProfileUpdateOneWithoutDoctorInput {
  create?: Maybe<ProfileCreateWithoutDoctorInput>;
  update?: Maybe<ProfileUpdateWithoutDoctorDataInput>;
  upsert?: Maybe<ProfileUpsertWithoutDoctorInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProfileWhereUniqueInput>;
}

export interface ProfileUpdateWithoutDoctorDataInput {
  phone?: Maybe<String>;
  active?: Maybe<Boolean>;
  hospital?: Maybe<HospitalUpdateOneWithoutProfileInput>;
}

export interface HospitalUpdateOneWithoutProfileInput {
  create?: Maybe<HospitalCreateWithoutProfileInput>;
  update?: Maybe<HospitalUpdateWithoutProfileDataInput>;
  upsert?: Maybe<HospitalUpsertWithoutProfileInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<HospitalWhereUniqueInput>;
}

export interface HospitalUpdateWithoutProfileDataInput {
  emailVerification?: Maybe<Boolean>;
  name?: Maybe<String>;
  controllers?: Maybe<UserUpdateManyWithoutHospitalInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutHospitalInput>;
  location?: Maybe<LocationUpdateOneWithoutHospitalInput>;
}

export interface HospitalUpsertWithoutProfileInput {
  update: HospitalUpdateWithoutProfileDataInput;
  create: HospitalCreateWithoutProfileInput;
}

export interface ProfileUpsertWithoutDoctorInput {
  update: ProfileUpdateWithoutDoctorDataInput;
  create: ProfileCreateWithoutDoctorInput;
}

export interface DoctorUpsertWithWhereUniqueWithoutChamberInput {
  where: DoctorWhereUniqueInput;
  update: DoctorUpdateWithoutChamberDataInput;
  create: DoctorCreateWithoutChamberInput;
}

export interface DoctorScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  specialization?: Maybe<String>;
  specialization_not?: Maybe<String>;
  specialization_in?: Maybe<String[] | String>;
  specialization_not_in?: Maybe<String[] | String>;
  specialization_lt?: Maybe<String>;
  specialization_lte?: Maybe<String>;
  specialization_gt?: Maybe<String>;
  specialization_gte?: Maybe<String>;
  specialization_contains?: Maybe<String>;
  specialization_not_contains?: Maybe<String>;
  specialization_starts_with?: Maybe<String>;
  specialization_not_starts_with?: Maybe<String>;
  specialization_ends_with?: Maybe<String>;
  specialization_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  emailVerification?: Maybe<Boolean>;
  emailVerification_not?: Maybe<Boolean>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  zip?: Maybe<String>;
  zip_not?: Maybe<String>;
  zip_in?: Maybe<String[] | String>;
  zip_not_in?: Maybe<String[] | String>;
  zip_lt?: Maybe<String>;
  zip_lte?: Maybe<String>;
  zip_gt?: Maybe<String>;
  zip_gte?: Maybe<String>;
  zip_contains?: Maybe<String>;
  zip_not_contains?: Maybe<String>;
  zip_starts_with?: Maybe<String>;
  zip_not_starts_with?: Maybe<String>;
  zip_ends_with?: Maybe<String>;
  zip_not_ends_with?: Maybe<String>;
  AND?: Maybe<DoctorScalarWhereInput[] | DoctorScalarWhereInput>;
  OR?: Maybe<DoctorScalarWhereInput[] | DoctorScalarWhereInput>;
  NOT?: Maybe<DoctorScalarWhereInput[] | DoctorScalarWhereInput>;
}

export interface DoctorUpdateManyWithWhereNestedInput {
  where: DoctorScalarWhereInput;
  data: DoctorUpdateManyDataInput;
}

export interface DoctorUpdateManyDataInput {
  name?: Maybe<String>;
  specialization?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface ChamberUpsertWithoutLocationInput {
  update: ChamberUpdateWithoutLocationDataInput;
  create: ChamberCreateWithoutLocationInput;
}

export interface LocationUpsertWithoutHospitalInput {
  update: LocationUpdateWithoutHospitalDataInput;
  create: LocationCreateWithoutHospitalInput;
}

export interface HospitalUpsertWithoutControllersInput {
  update: HospitalUpdateWithoutControllersDataInput;
  create: HospitalCreateWithoutControllersInput;
}

export interface UserUpsertWithoutVerifacInput {
  update: UserUpdateWithoutVerifacDataInput;
  create: UserCreateWithoutVerifacInput;
}

export interface VerificationCodeUpsertWithoutDoctorInput {
  update: VerificationCodeUpdateWithoutDoctorDataInput;
  create: VerificationCodeCreateWithoutDoctorInput;
}

export interface DoctorUpsertWithoutUserInput {
  update: DoctorUpdateWithoutUserDataInput;
  create: DoctorCreateWithoutUserInput;
}

export interface UserUpsertWithWhereUniqueWithoutHospitalInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutHospitalDataInput;
  create: UserCreateWithoutHospitalInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  emailVerification_not?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
  roles_not?: Maybe<UserRoles>;
  roles_in?: Maybe<UserRoles[] | UserRoles>;
  roles_not_in?: Maybe<UserRoles[] | UserRoles>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
}

export interface HospitalUpsertWithoutLocationInput {
  update: HospitalUpdateWithoutLocationDataInput;
  create: HospitalCreateWithoutLocationInput;
}

export interface LocationUpsertWithoutChamberInput {
  update: LocationUpdateWithoutChamberDataInput;
  create: LocationCreateWithoutChamberInput;
}

export interface ChamberUpsertWithWhereUniqueWithoutDoctorInput {
  where: ChamberWhereUniqueInput;
  update: ChamberUpdateWithoutDoctorDataInput;
  create: ChamberCreateWithoutDoctorInput;
}

export interface ChamberScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  start_time_not?: Maybe<DateTimeInput>;
  start_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_time_lt?: Maybe<DateTimeInput>;
  start_time_lte?: Maybe<DateTimeInput>;
  start_time_gt?: Maybe<DateTimeInput>;
  start_time_gte?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  end_time_not?: Maybe<DateTimeInput>;
  end_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_time_lt?: Maybe<DateTimeInput>;
  end_time_lte?: Maybe<DateTimeInput>;
  end_time_gt?: Maybe<DateTimeInput>;
  end_time_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ChamberScalarWhereInput[] | ChamberScalarWhereInput>;
  OR?: Maybe<ChamberScalarWhereInput[] | ChamberScalarWhereInput>;
  NOT?: Maybe<ChamberScalarWhereInput[] | ChamberScalarWhereInput>;
}

export interface ChamberUpdateManyWithWhereNestedInput {
  where: ChamberScalarWhereInput;
  data: ChamberUpdateManyDataInput;
}

export interface ChamberUpdateManyDataInput {
  name?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
}

export interface DoctorUpsertWithoutProfileInput {
  update: DoctorUpdateWithoutProfileDataInput;
  create: DoctorCreateWithoutProfileInput;
}

export interface ProfileUpsertWithoutHospitalInput {
  update: ProfileUpdateWithoutHospitalDataInput;
  create: ProfileCreateWithoutHospitalInput;
}

export interface HospitalUpsertWithoutAppointmentsInput {
  update: HospitalUpdateWithoutAppointmentsDataInput;
  create: HospitalCreateWithoutAppointmentsInput;
}

export interface AppointmentUpsertWithWhereUniqueWithoutChamberInput {
  where: AppointmentWhereUniqueInput;
  update: AppointmentUpdateWithoutChamberDataInput;
  create: AppointmentCreateWithoutChamberInput;
}

export interface ChamberUpsertWithWhereUniqueWithoutAttendingInput {
  where: ChamberWhereUniqueInput;
  update: ChamberUpdateWithoutAttendingDataInput;
  create: ChamberCreateWithoutAttendingInput;
}

export interface AttendingUpsertWithWhereUniqueWithoutDoctorInput {
  where: AttendingWhereUniqueInput;
  update: AttendingUpdateWithoutDoctorDataInput;
  create: AttendingCreateWithoutDoctorInput;
}

export interface AttendingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AttendingScalarWhereInput[] | AttendingScalarWhereInput>;
  OR?: Maybe<AttendingScalarWhereInput[] | AttendingScalarWhereInput>;
  NOT?: Maybe<AttendingScalarWhereInput[] | AttendingScalarWhereInput>;
}

export interface DoctorUpsertWithoutVerifacInput {
  update: DoctorUpdateWithoutVerifacDataInput;
  create: DoctorCreateWithoutVerifacInput;
}

export interface VerificationCodeUpsertWithoutUserInput {
  update: VerificationCodeUpdateWithoutUserDataInput;
  create: VerificationCodeCreateWithoutUserInput;
}

export interface UserUpsertWithoutDoctorInput {
  update: UserUpdateWithoutDoctorDataInput;
  create: UserCreateWithoutDoctorInput;
}

export interface DoctorUpsertWithoutAttendingInput {
  update: DoctorUpdateWithoutAttendingDataInput;
  create: DoctorCreateWithoutAttendingInput;
}

export interface AttendingUpsertWithWhereUniqueWithoutChamberInput {
  where: AttendingWhereUniqueInput;
  update: AttendingUpdateWithoutChamberDataInput;
  create: AttendingCreateWithoutChamberInput;
}

export interface ChamberUpsertWithoutAppointmentsInput {
  update: ChamberUpdateWithoutAppointmentsDataInput;
  create: ChamberCreateWithoutAppointmentsInput;
}

export interface AppointmentUpdateManyMutationInput {
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
}

export interface AttendingCreateInput {
  id?: Maybe<ID_Input>;
  doctor?: Maybe<DoctorCreateOneWithoutAttendingInput>;
  chamber?: Maybe<ChamberCreateManyWithoutAttendingInput>;
}

export interface AttendingUpdateInput {
  doctor?: Maybe<DoctorUpdateOneWithoutAttendingInput>;
  chamber?: Maybe<ChamberUpdateManyWithoutAttendingInput>;
}

export interface ChamberCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  start_time: DateTimeInput;
  end_time: DateTimeInput;
  attending?: Maybe<AttendingCreateManyWithoutChamberInput>;
  appointments?: Maybe<AppointmentCreateManyWithoutChamberInput>;
  doctor?: Maybe<DoctorCreateManyWithoutChamberInput>;
  location?: Maybe<LocationCreateOneWithoutChamberInput>;
}

export interface ChamberUpdateInput {
  name?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
  attending?: Maybe<AttendingUpdateManyWithoutChamberInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutChamberInput>;
  doctor?: Maybe<DoctorUpdateManyWithoutChamberInput>;
  location?: Maybe<LocationUpdateOneWithoutChamberInput>;
}

export interface ChamberUpdateManyMutationInput {
  name?: Maybe<String>;
  start_time?: Maybe<DateTimeInput>;
  end_time?: Maybe<DateTimeInput>;
}

export interface DoctorCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  specialization: String;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  user: UserCreateOneWithoutDoctorInput;
  attending?: Maybe<AttendingCreateManyWithoutDoctorInput>;
  chamber?: Maybe<ChamberCreateManyWithoutDoctorInput>;
  verifac?: Maybe<VerificationCodeCreateOneWithoutDoctorInput>;
  profile?: Maybe<ProfileCreateOneWithoutDoctorInput>;
}

export interface DoctorUpdateInput {
  name?: Maybe<String>;
  specialization?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutDoctorInput>;
  attending?: Maybe<AttendingUpdateManyWithoutDoctorInput>;
  chamber?: Maybe<ChamberUpdateManyWithoutDoctorInput>;
  verifac?: Maybe<VerificationCodeUpdateOneWithoutDoctorInput>;
  profile?: Maybe<ProfileUpdateOneWithoutDoctorInput>;
}

export interface DoctorUpdateManyMutationInput {
  name?: Maybe<String>;
  specialization?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  zip?: Maybe<String>;
}

export interface HospitalCreateInput {
  id?: Maybe<ID_Input>;
  emailVerification?: Maybe<Boolean>;
  name: String;
  profile: ProfileCreateOneWithoutHospitalInput;
  controllers?: Maybe<UserCreateManyWithoutHospitalInput>;
  appointments?: Maybe<AppointmentCreateManyWithoutHospitalInput>;
  location?: Maybe<LocationCreateOneWithoutHospitalInput>;
}

export interface HospitalUpdateInput {
  emailVerification?: Maybe<Boolean>;
  name?: Maybe<String>;
  profile?: Maybe<ProfileUpdateOneRequiredWithoutHospitalInput>;
  controllers?: Maybe<UserUpdateManyWithoutHospitalInput>;
  appointments?: Maybe<AppointmentUpdateManyWithoutHospitalInput>;
  location?: Maybe<LocationUpdateOneWithoutHospitalInput>;
}

export interface HospitalUpdateManyMutationInput {
  emailVerification?: Maybe<Boolean>;
  name?: Maybe<String>;
}

export interface LocationCreateInput {
  id?: Maybe<ID_Input>;
  address?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  addressID?: Maybe<String>;
  hospital?: Maybe<HospitalCreateOneWithoutLocationInput>;
  chamber?: Maybe<ChamberCreateOneWithoutLocationInput>;
}

export interface LocationUpdateInput {
  address?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  addressID?: Maybe<String>;
  hospital?: Maybe<HospitalUpdateOneWithoutLocationInput>;
  chamber?: Maybe<ChamberUpdateOneWithoutLocationInput>;
}

export interface LocationUpdateManyMutationInput {
  address?: Maybe<String>;
  slug?: Maybe<String>;
  lat?: Maybe<String>;
  lng?: Maybe<String>;
  addressID?: Maybe<String>;
}

export interface ProfileCreateInput {
  id?: Maybe<ID_Input>;
  phone: String;
  active?: Maybe<Boolean>;
  hospital?: Maybe<HospitalCreateOneWithoutProfileInput>;
  doctor?: Maybe<DoctorCreateOneWithoutProfileInput>;
}

export interface ProfileUpdateInput {
  phone?: Maybe<String>;
  active?: Maybe<Boolean>;
  hospital?: Maybe<HospitalUpdateOneWithoutProfileInput>;
  doctor?: Maybe<DoctorUpdateOneWithoutProfileInput>;
}

export interface ProfileUpdateManyMutationInput {
  phone?: Maybe<String>;
  active?: Maybe<Boolean>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  emailVerification?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
  doctor: DoctorCreateOneWithoutUserInput;
  verifac?: Maybe<VerificationCodeCreateOneWithoutUserInput>;
  hospital?: Maybe<HospitalCreateOneWithoutControllersInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
  doctor?: Maybe<DoctorUpdateOneRequiredWithoutUserInput>;
  verifac?: Maybe<VerificationCodeUpdateOneWithoutUserInput>;
  hospital?: Maybe<HospitalUpdateOneWithoutControllersInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  emailVerification?: Maybe<Boolean>;
  roles?: Maybe<UserRoles>;
}

export interface VerificationCodeCreateInput {
  id?: Maybe<ID_Input>;
  uid: String;
  user?: Maybe<UserCreateOneWithoutVerifacInput>;
  doctor?: Maybe<DoctorCreateOneWithoutVerifacInput>;
}

export interface VerificationCodeUpdateInput {
  uid?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutVerifacInput>;
  doctor?: Maybe<DoctorUpdateOneWithoutVerifacInput>;
}

export interface VerificationCodeUpdateManyMutationInput {
  uid?: Maybe<String>;
}

export interface AppointmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AppointmentWhereInput>;
  AND?: Maybe<
    AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput
  >;
}

export interface AttendingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AttendingWhereInput>;
  AND?: Maybe<
    AttendingSubscriptionWhereInput[] | AttendingSubscriptionWhereInput
  >;
  OR?: Maybe<
    AttendingSubscriptionWhereInput[] | AttendingSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AttendingSubscriptionWhereInput[] | AttendingSubscriptionWhereInput
  >;
}

export interface ChamberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChamberWhereInput>;
  AND?: Maybe<ChamberSubscriptionWhereInput[] | ChamberSubscriptionWhereInput>;
  OR?: Maybe<ChamberSubscriptionWhereInput[] | ChamberSubscriptionWhereInput>;
  NOT?: Maybe<ChamberSubscriptionWhereInput[] | ChamberSubscriptionWhereInput>;
}

export interface DoctorSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DoctorWhereInput>;
  AND?: Maybe<DoctorSubscriptionWhereInput[] | DoctorSubscriptionWhereInput>;
  OR?: Maybe<DoctorSubscriptionWhereInput[] | DoctorSubscriptionWhereInput>;
  NOT?: Maybe<DoctorSubscriptionWhereInput[] | DoctorSubscriptionWhereInput>;
}

export interface HospitalSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HospitalWhereInput>;
  AND?: Maybe<
    HospitalSubscriptionWhereInput[] | HospitalSubscriptionWhereInput
  >;
  OR?: Maybe<HospitalSubscriptionWhereInput[] | HospitalSubscriptionWhereInput>;
  NOT?: Maybe<
    HospitalSubscriptionWhereInput[] | HospitalSubscriptionWhereInput
  >;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProfileWhereInput>;
  AND?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  OR?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
  NOT?: Maybe<ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VerificationCodeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VerificationCodeWhereInput>;
  AND?: Maybe<
    | VerificationCodeSubscriptionWhereInput[]
    | VerificationCodeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | VerificationCodeSubscriptionWhereInput[]
    | VerificationCodeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | VerificationCodeSubscriptionWhereInput[]
    | VerificationCodeSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Appointment {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  start_time: DateTimeOutput;
  end_time: DateTimeOutput;
}

export interface AppointmentPromise extends Promise<Appointment>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  start_time: () => Promise<DateTimeOutput>;
  end_time: () => Promise<DateTimeOutput>;
  chamber: <T = ChamberPromise>() => T;
  hospital: <T = HospitalPromise>() => T;
}

export interface AppointmentSubscription
  extends Promise<AsyncIterator<Appointment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  start_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  chamber: <T = ChamberSubscription>() => T;
  hospital: <T = HospitalSubscription>() => T;
}

export interface AppointmentNullablePromise
  extends Promise<Appointment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  start_time: () => Promise<DateTimeOutput>;
  end_time: () => Promise<DateTimeOutput>;
  chamber: <T = ChamberPromise>() => T;
  hospital: <T = HospitalPromise>() => T;
}

export interface Chamber {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  start_time: DateTimeOutput;
  end_time: DateTimeOutput;
}

export interface ChamberPromise extends Promise<Chamber>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  start_time: () => Promise<DateTimeOutput>;
  end_time: () => Promise<DateTimeOutput>;
  attending: <T = FragmentableArray<Attending>>(args?: {
    where?: AttendingWhereInput;
    orderBy?: AttendingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  appointments: <T = FragmentableArray<Appointment>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  doctor: <T = FragmentableArray<Doctor>>(args?: {
    where?: DoctorWhereInput;
    orderBy?: DoctorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationPromise>() => T;
}

export interface ChamberSubscription
  extends Promise<AsyncIterator<Chamber>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  start_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  attending: <T = Promise<AsyncIterator<AttendingSubscription>>>(args?: {
    where?: AttendingWhereInput;
    orderBy?: AttendingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  appointments: <T = Promise<AsyncIterator<AppointmentSubscription>>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  doctor: <T = Promise<AsyncIterator<DoctorSubscription>>>(args?: {
    where?: DoctorWhereInput;
    orderBy?: DoctorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationSubscription>() => T;
}

export interface ChamberNullablePromise
  extends Promise<Chamber | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  start_time: () => Promise<DateTimeOutput>;
  end_time: () => Promise<DateTimeOutput>;
  attending: <T = FragmentableArray<Attending>>(args?: {
    where?: AttendingWhereInput;
    orderBy?: AttendingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  appointments: <T = FragmentableArray<Appointment>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  doctor: <T = FragmentableArray<Doctor>>(args?: {
    where?: DoctorWhereInput;
    orderBy?: DoctorOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationPromise>() => T;
}

export interface Attending {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AttendingPromise extends Promise<Attending>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  doctor: <T = DoctorPromise>() => T;
  chamber: <T = FragmentableArray<Chamber>>(args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttendingSubscription
  extends Promise<AsyncIterator<Attending>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  doctor: <T = DoctorSubscription>() => T;
  chamber: <T = Promise<AsyncIterator<ChamberSubscription>>>(args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttendingNullablePromise
  extends Promise<Attending | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  doctor: <T = DoctorPromise>() => T;
  chamber: <T = FragmentableArray<Chamber>>(args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Doctor {
  id: ID_Output;
  name: String;
  specialization: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  emailVerification?: Boolean;
  phone?: String;
  address?: String;
  state?: String;
  zip?: String;
}

export interface DoctorPromise extends Promise<Doctor>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  specialization: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  emailVerification: () => Promise<Boolean>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  user: <T = UserPromise>() => T;
  attending: <T = FragmentableArray<Attending>>(args?: {
    where?: AttendingWhereInput;
    orderBy?: AttendingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chamber: <T = FragmentableArray<Chamber>>(args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  verifac: <T = VerificationCodePromise>() => T;
  profile: <T = ProfilePromise>() => T;
}

export interface DoctorSubscription
  extends Promise<AsyncIterator<Doctor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  specialization: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  emailVerification: () => Promise<AsyncIterator<Boolean>>;
  phone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  attending: <T = Promise<AsyncIterator<AttendingSubscription>>>(args?: {
    where?: AttendingWhereInput;
    orderBy?: AttendingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chamber: <T = Promise<AsyncIterator<ChamberSubscription>>>(args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  verifac: <T = VerificationCodeSubscription>() => T;
  profile: <T = ProfileSubscription>() => T;
}

export interface DoctorNullablePromise
  extends Promise<Doctor | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  specialization: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  emailVerification: () => Promise<Boolean>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
  user: <T = UserPromise>() => T;
  attending: <T = FragmentableArray<Attending>>(args?: {
    where?: AttendingWhereInput;
    orderBy?: AttendingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chamber: <T = FragmentableArray<Chamber>>(args?: {
    where?: ChamberWhereInput;
    orderBy?: ChamberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  verifac: <T = VerificationCodePromise>() => T;
  profile: <T = ProfilePromise>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  emailVerification?: Boolean;
  roles?: UserRoles;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  emailVerification: () => Promise<Boolean>;
  roles: () => Promise<UserRoles>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  doctor: <T = DoctorPromise>() => T;
  verifac: <T = VerificationCodePromise>() => T;
  hospital: <T = HospitalPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  emailVerification: () => Promise<AsyncIterator<Boolean>>;
  roles: () => Promise<AsyncIterator<UserRoles>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  doctor: <T = DoctorSubscription>() => T;
  verifac: <T = VerificationCodeSubscription>() => T;
  hospital: <T = HospitalSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  emailVerification: () => Promise<Boolean>;
  roles: () => Promise<UserRoles>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  doctor: <T = DoctorPromise>() => T;
  verifac: <T = VerificationCodePromise>() => T;
  hospital: <T = HospitalPromise>() => T;
}

export interface VerificationCode {
  id: ID_Output;
  uid: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VerificationCodePromise
  extends Promise<VerificationCode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  uid: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  doctor: <T = DoctorPromise>() => T;
}

export interface VerificationCodeSubscription
  extends Promise<AsyncIterator<VerificationCode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uid: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  doctor: <T = DoctorSubscription>() => T;
}

export interface VerificationCodeNullablePromise
  extends Promise<VerificationCode | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  uid: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  doctor: <T = DoctorPromise>() => T;
}

export interface Hospital {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  emailVerification?: Boolean;
  name: String;
}

export interface HospitalPromise extends Promise<Hospital>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  emailVerification: () => Promise<Boolean>;
  name: () => Promise<String>;
  profile: <T = ProfilePromise>() => T;
  controllers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  appointments: <T = FragmentableArray<Appointment>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationPromise>() => T;
}

export interface HospitalSubscription
  extends Promise<AsyncIterator<Hospital>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  emailVerification: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  profile: <T = ProfileSubscription>() => T;
  controllers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  appointments: <T = Promise<AsyncIterator<AppointmentSubscription>>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationSubscription>() => T;
}

export interface HospitalNullablePromise
  extends Promise<Hospital | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  emailVerification: () => Promise<Boolean>;
  name: () => Promise<String>;
  profile: <T = ProfilePromise>() => T;
  controllers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  appointments: <T = FragmentableArray<Appointment>>(args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  location: <T = LocationPromise>() => T;
}

export interface Profile {
  id: ID_Output;
  phone: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  active?: Boolean;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  id: () => Promise<ID_Output>;
  phone: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  active: () => Promise<Boolean>;
  hospital: <T = HospitalPromise>() => T;
  doctor: <T = DoctorPromise>() => T;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phone: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  hospital: <T = HospitalSubscription>() => T;
  doctor: <T = DoctorSubscription>() => T;
}

export interface ProfileNullablePromise
  extends Promise<Profile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  phone: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  active: () => Promise<Boolean>;
  hospital: <T = HospitalPromise>() => T;
  doctor: <T = DoctorPromise>() => T;
}

export interface Location {
  id: ID_Output;
  address?: String;
  slug?: String;
  lat?: String;
  lng?: String;
  addressID?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  slug: () => Promise<String>;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  addressID: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  hospital: <T = HospitalPromise>() => T;
  chamber: <T = ChamberPromise>() => T;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<String>>;
  lng: () => Promise<AsyncIterator<String>>;
  addressID: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  hospital: <T = HospitalSubscription>() => T;
  chamber: <T = ChamberSubscription>() => T;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  slug: () => Promise<String>;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  addressID: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  hospital: <T = HospitalPromise>() => T;
  chamber: <T = ChamberPromise>() => T;
}

export interface AppointmentConnection {
  pageInfo: PageInfo;
  edges: AppointmentEdge[];
}

export interface AppointmentConnectionPromise
  extends Promise<AppointmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AppointmentEdge>>() => T;
  aggregate: <T = AggregateAppointmentPromise>() => T;
}

export interface AppointmentConnectionSubscription
  extends Promise<AsyncIterator<AppointmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AppointmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAppointmentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AppointmentEdge {
  node: Appointment;
  cursor: String;
}

export interface AppointmentEdgePromise
  extends Promise<AppointmentEdge>,
    Fragmentable {
  node: <T = AppointmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AppointmentEdgeSubscription
  extends Promise<AsyncIterator<AppointmentEdge>>,
    Fragmentable {
  node: <T = AppointmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAppointment {
  count: Int;
}

export interface AggregateAppointmentPromise
  extends Promise<AggregateAppointment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAppointmentSubscription
  extends Promise<AsyncIterator<AggregateAppointment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AttendingConnection {
  pageInfo: PageInfo;
  edges: AttendingEdge[];
}

export interface AttendingConnectionPromise
  extends Promise<AttendingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttendingEdge>>() => T;
  aggregate: <T = AggregateAttendingPromise>() => T;
}

export interface AttendingConnectionSubscription
  extends Promise<AsyncIterator<AttendingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttendingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttendingSubscription>() => T;
}

export interface AttendingEdge {
  node: Attending;
  cursor: String;
}

export interface AttendingEdgePromise
  extends Promise<AttendingEdge>,
    Fragmentable {
  node: <T = AttendingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttendingEdgeSubscription
  extends Promise<AsyncIterator<AttendingEdge>>,
    Fragmentable {
  node: <T = AttendingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAttending {
  count: Int;
}

export interface AggregateAttendingPromise
  extends Promise<AggregateAttending>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttendingSubscription
  extends Promise<AsyncIterator<AggregateAttending>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChamberConnection {
  pageInfo: PageInfo;
  edges: ChamberEdge[];
}

export interface ChamberConnectionPromise
  extends Promise<ChamberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChamberEdge>>() => T;
  aggregate: <T = AggregateChamberPromise>() => T;
}

export interface ChamberConnectionSubscription
  extends Promise<AsyncIterator<ChamberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChamberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChamberSubscription>() => T;
}

export interface ChamberEdge {
  node: Chamber;
  cursor: String;
}

export interface ChamberEdgePromise extends Promise<ChamberEdge>, Fragmentable {
  node: <T = ChamberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChamberEdgeSubscription
  extends Promise<AsyncIterator<ChamberEdge>>,
    Fragmentable {
  node: <T = ChamberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChamber {
  count: Int;
}

export interface AggregateChamberPromise
  extends Promise<AggregateChamber>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChamberSubscription
  extends Promise<AsyncIterator<AggregateChamber>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DoctorConnection {
  pageInfo: PageInfo;
  edges: DoctorEdge[];
}

export interface DoctorConnectionPromise
  extends Promise<DoctorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DoctorEdge>>() => T;
  aggregate: <T = AggregateDoctorPromise>() => T;
}

export interface DoctorConnectionSubscription
  extends Promise<AsyncIterator<DoctorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DoctorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDoctorSubscription>() => T;
}

export interface DoctorEdge {
  node: Doctor;
  cursor: String;
}

export interface DoctorEdgePromise extends Promise<DoctorEdge>, Fragmentable {
  node: <T = DoctorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DoctorEdgeSubscription
  extends Promise<AsyncIterator<DoctorEdge>>,
    Fragmentable {
  node: <T = DoctorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDoctor {
  count: Int;
}

export interface AggregateDoctorPromise
  extends Promise<AggregateDoctor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDoctorSubscription
  extends Promise<AsyncIterator<AggregateDoctor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HospitalConnection {
  pageInfo: PageInfo;
  edges: HospitalEdge[];
}

export interface HospitalConnectionPromise
  extends Promise<HospitalConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HospitalEdge>>() => T;
  aggregate: <T = AggregateHospitalPromise>() => T;
}

export interface HospitalConnectionSubscription
  extends Promise<AsyncIterator<HospitalConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HospitalEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHospitalSubscription>() => T;
}

export interface HospitalEdge {
  node: Hospital;
  cursor: String;
}

export interface HospitalEdgePromise
  extends Promise<HospitalEdge>,
    Fragmentable {
  node: <T = HospitalPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HospitalEdgeSubscription
  extends Promise<AsyncIterator<HospitalEdge>>,
    Fragmentable {
  node: <T = HospitalSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHospital {
  count: Int;
}

export interface AggregateHospitalPromise
  extends Promise<AggregateHospital>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHospitalSubscription
  extends Promise<AsyncIterator<AggregateHospital>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProfileConnection {
  pageInfo: PageInfo;
  edges: ProfileEdge[];
}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfilePromise>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

export interface ProfileEdge {
  node: Profile;
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = ProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VerificationCodeConnection {
  pageInfo: PageInfo;
  edges: VerificationCodeEdge[];
}

export interface VerificationCodeConnectionPromise
  extends Promise<VerificationCodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VerificationCodeEdge>>() => T;
  aggregate: <T = AggregateVerificationCodePromise>() => T;
}

export interface VerificationCodeConnectionSubscription
  extends Promise<AsyncIterator<VerificationCodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VerificationCodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVerificationCodeSubscription>() => T;
}

export interface VerificationCodeEdge {
  node: VerificationCode;
  cursor: String;
}

export interface VerificationCodeEdgePromise
  extends Promise<VerificationCodeEdge>,
    Fragmentable {
  node: <T = VerificationCodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VerificationCodeEdgeSubscription
  extends Promise<AsyncIterator<VerificationCodeEdge>>,
    Fragmentable {
  node: <T = VerificationCodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVerificationCode {
  count: Int;
}

export interface AggregateVerificationCodePromise
  extends Promise<AggregateVerificationCode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVerificationCodeSubscription
  extends Promise<AsyncIterator<AggregateVerificationCode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AppointmentSubscriptionPayload {
  mutation: MutationType;
  node: Appointment;
  updatedFields: String[];
  previousValues: AppointmentPreviousValues;
}

export interface AppointmentSubscriptionPayloadPromise
  extends Promise<AppointmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AppointmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AppointmentPreviousValuesPromise>() => T;
}

export interface AppointmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AppointmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AppointmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AppointmentPreviousValuesSubscription>() => T;
}

export interface AppointmentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  start_time: DateTimeOutput;
  end_time: DateTimeOutput;
}

export interface AppointmentPreviousValuesPromise
  extends Promise<AppointmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  start_time: () => Promise<DateTimeOutput>;
  end_time: () => Promise<DateTimeOutput>;
}

export interface AppointmentPreviousValuesSubscription
  extends Promise<AsyncIterator<AppointmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  start_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AttendingSubscriptionPayload {
  mutation: MutationType;
  node: Attending;
  updatedFields: String[];
  previousValues: AttendingPreviousValues;
}

export interface AttendingSubscriptionPayloadPromise
  extends Promise<AttendingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttendingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttendingPreviousValuesPromise>() => T;
}

export interface AttendingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttendingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttendingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttendingPreviousValuesSubscription>() => T;
}

export interface AttendingPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AttendingPreviousValuesPromise
  extends Promise<AttendingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AttendingPreviousValuesSubscription
  extends Promise<AsyncIterator<AttendingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ChamberSubscriptionPayload {
  mutation: MutationType;
  node: Chamber;
  updatedFields: String[];
  previousValues: ChamberPreviousValues;
}

export interface ChamberSubscriptionPayloadPromise
  extends Promise<ChamberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChamberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChamberPreviousValuesPromise>() => T;
}

export interface ChamberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChamberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChamberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChamberPreviousValuesSubscription>() => T;
}

export interface ChamberPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  start_time: DateTimeOutput;
  end_time: DateTimeOutput;
}

export interface ChamberPreviousValuesPromise
  extends Promise<ChamberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  start_time: () => Promise<DateTimeOutput>;
  end_time: () => Promise<DateTimeOutput>;
}

export interface ChamberPreviousValuesSubscription
  extends Promise<AsyncIterator<ChamberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  start_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DoctorSubscriptionPayload {
  mutation: MutationType;
  node: Doctor;
  updatedFields: String[];
  previousValues: DoctorPreviousValues;
}

export interface DoctorSubscriptionPayloadPromise
  extends Promise<DoctorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DoctorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DoctorPreviousValuesPromise>() => T;
}

export interface DoctorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DoctorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DoctorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DoctorPreviousValuesSubscription>() => T;
}

export interface DoctorPreviousValues {
  id: ID_Output;
  name: String;
  specialization: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  emailVerification?: Boolean;
  phone?: String;
  address?: String;
  state?: String;
  zip?: String;
}

export interface DoctorPreviousValuesPromise
  extends Promise<DoctorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  specialization: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  emailVerification: () => Promise<Boolean>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<String>;
}

export interface DoctorPreviousValuesSubscription
  extends Promise<AsyncIterator<DoctorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  specialization: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  emailVerification: () => Promise<AsyncIterator<Boolean>>;
  phone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
}

export interface HospitalSubscriptionPayload {
  mutation: MutationType;
  node: Hospital;
  updatedFields: String[];
  previousValues: HospitalPreviousValues;
}

export interface HospitalSubscriptionPayloadPromise
  extends Promise<HospitalSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HospitalPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HospitalPreviousValuesPromise>() => T;
}

export interface HospitalSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HospitalSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HospitalSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HospitalPreviousValuesSubscription>() => T;
}

export interface HospitalPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  emailVerification?: Boolean;
  name: String;
}

export interface HospitalPreviousValuesPromise
  extends Promise<HospitalPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  emailVerification: () => Promise<Boolean>;
  name: () => Promise<String>;
}

export interface HospitalPreviousValuesSubscription
  extends Promise<AsyncIterator<HospitalPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  emailVerification: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface LocationPreviousValues {
  id: ID_Output;
  address?: String;
  slug?: String;
  lat?: String;
  lng?: String;
  addressID?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  slug: () => Promise<String>;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  addressID: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  lat: () => Promise<AsyncIterator<String>>;
  lng: () => Promise<AsyncIterator<String>>;
  addressID: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  node: Profile;
  updatedFields: String[];
  previousValues: ProfilePreviousValues;
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValuesPromise>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

export interface ProfilePreviousValues {
  id: ID_Output;
  phone: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  active?: Boolean;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  phone: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  active: () => Promise<Boolean>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phone: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  active: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  emailVerification?: Boolean;
  roles?: UserRoles;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  emailVerification: () => Promise<Boolean>;
  roles: () => Promise<UserRoles>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  emailVerification: () => Promise<AsyncIterator<Boolean>>;
  roles: () => Promise<AsyncIterator<UserRoles>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VerificationCodeSubscriptionPayload {
  mutation: MutationType;
  node: VerificationCode;
  updatedFields: String[];
  previousValues: VerificationCodePreviousValues;
}

export interface VerificationCodeSubscriptionPayloadPromise
  extends Promise<VerificationCodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VerificationCodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VerificationCodePreviousValuesPromise>() => T;
}

export interface VerificationCodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VerificationCodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VerificationCodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VerificationCodePreviousValuesSubscription>() => T;
}

export interface VerificationCodePreviousValues {
  id: ID_Output;
  uid: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VerificationCodePreviousValuesPromise
  extends Promise<VerificationCodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  uid: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VerificationCodePreviousValuesSubscription
  extends Promise<AsyncIterator<VerificationCodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uid: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "UserRoles",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Profile",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Doctor",
    embedded: false
  },
  {
    name: "Appointment",
    embedded: false
  },
  {
    name: "Hospital",
    embedded: false
  },
  {
    name: "Attending",
    embedded: false
  },
  {
    name: "Chamber",
    embedded: false
  },
  {
    name: "VerificationCode",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://atmiyo.achtunglabs.co:4466`
});
export const prisma = new Prisma();
